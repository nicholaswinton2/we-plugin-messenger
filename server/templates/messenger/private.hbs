<html>
  <head>
    <title>{{title}}</title>
    <link rel="stylesheet" href="http://os.alfajango.com/css/jquery.cssemoticons.css">
    <link rel="stylesheet" type="text/css" href="/public/plugin/we-plugin-messenger/files/we-messenger.css">

  </head>
  <body>

  <div id="chat">
    <div class="chat-header">
      <span id="#connectionStatus"></span> {{title}}
      <span class="header-actions pull-right">
        <button id="box-minimize" onclick="weChat.boxMinimize()" class="btn btn-close">-</button>
        <button id="box-close" onclick="weChat.boxClose()" class="btn btn-close">X</button>
      </span>
    </div>
    <div class="chat-actions">
      <span id="loadingMessages">{{{t 'messenger.loading'}}}</span>
    </div>

    <ul id="messagesList" class="chat-messages" style="height:{{height}}px;"></ul>
    <div class="chat-real-time-status">
      <span id="contact-is-writing">{{{t 'messenger.is.writing'}}}</span>
    </div>
    <div class="chat-form-area">
      {{#if isAuthenticated}}
        <form class="form-inline" id="newMessageForm" onsubmit="weChat.sendMessage();return false;">
          <div class="form-group">
              <input id="newMessageContent" name="newMessageContent" type="content" class="form-control" placeholder="New message">
              <button type="submit" class="btn btn-default">Submit</button>
          </div>
        <form>
      {{else}}
        {{!-- <a href="/login" target="_blank">Login to send messages.</a> --}}
      {{/if}}
    </div>
  </div>

  <div id="chatClosed">
    <div class="chat-header">
      <span id="#connectionStatus"></span> {{title}}
      <span class="header-actions pull-right">
        <button id="box-maximize" onclick="weChat.boxMaximize()" class="btn btn-maximize">-</button>
      </span>
    </div>
  </div>


  <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery.cookie/1.4.1/jquery.cookie.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment-with-locales.min.js"></script>
  <script type="text/javascript" src="/public/plugin/we-core/client/shared/libs/jquery.cssemoticons.js"></script>

  <script type="text/javascript" src="/public/plugin/we-core/client/shared/beforeAll/8_socket.io.js"></script>
  <script type="text/javascript">
    var weChat = {
      parentDomain: 'http://localhost:3000',
      socket: null,

      user: null,
      isOnline: false,
      contact: null,

      messages: [],
      lastMessageId: 0,

      messageCount: 0,
      users: {},
      loadingUsers: {},

      showAvatar: true,
      avatarWidth: 25,

      isLoadingMore: false,
      limit: 10,
      offset: 0,

      elementList: null,

      isMinimized: false,

      isWritingFlag: false,
      iAmWritingFlag: false,
      writingTime: 3000,

      initialize: function initialize() {
        var self = this;

        var authToken = $.cookie('weoauth');

        if (!window.contact || !window.contact.id)
          throw new Error('window.contact is required');

        self.contact = window.contact;
        self.users[window.contact.id] = window.contact;

        if (window.currentUser) {
          self.user = window.currentUser;
          self.users[window.currentUser.id] = window.currentUser;
        }

        var socket = io.connect({
          query: 'authToken=' + authToken
        });

        socket.on('connect', function(){
          socket.emit('messenger:private:talk:start');
        });

        socket.on('messenger:private:message:created', function(data) {
          if (!self.messageExists(data.message.id)) {
            self.newMessage(data.message);
            self.messages.push(data.message);
            self.incrementCount();
            self.scrollToBottom();
            self.stopContactWriting();
          }
        });

        socket.on('messenger:private:is:writing', function() {
          self.contactIsWriting();
        });

        this.socket = socket;

        this.getMessagesWithUser().always(function(){
          self.scrollToBottom();
        });

        this.elementList = $('#messagesList');


        // Create IE + others compatible event handler
        var eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';
        var eventer = window[eventMethod];
        var messageEvent = eventMethod === 'attachEvent' ? 'onmessage' : 'message';
        eventer(messageEvent, function(e) {
          if (self.parentDomain !== e.origin) return;
          if (typeof e.data !== 'string') return;
          var userId;

          if ( e.data.startsWith('maximize_private_box_') ) {
            userId = e.data.replace('maximize_private_box_', '');
            if (!Number(userId)) return;
            if (userId != self.contact.id) return;
            self.boxMaximize();
          }
        });

        $( function ($) {
          self.elementList.bind('scroll', function() {
            if ( self.elementList.scrollTop() == 0 ) {
              self.loadMoreMessages();
            } else if (
              $(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight
            ) {
              self.isScrolled = false;
            } else {
              self.isScrolled = true;
            }
          });

          $('#newMessageContent').bind('paste keyup', function() {
            self.iAmWriting();
          });
        });
      },

      boxClose: function() {
        parent.postMessage('close_private_box_' + this.contact.id, this.parentDomain);
      },
      boxMinimize: function() {
        parent.postMessage('minimize_private_box_' + this.contact.id, this.parentDomain);

        $('#chat').hide();
        $('#chatClosed').show();
        this.isMinimized = true;
      },

      boxMaximize: function() {
        parent.postMessage('maximize_private_box_' + this.contact.id, this.parentDomain);
        $('#chat').show();
        $('#chatClosed').hide();
        this.isMinimized = false;
      },

      startLoading: function() {
        $('#loadingMessages').show();
      },
      stopLoading: function() {
        $('#loadingMessages').hide();
      },

      contactIsWriting: function() {
        if (this.isWritingFlag) return;

        var self = this;

        $('#contact-is-writing').show();

        this.isWritingFlag = setTimeout(function() {
          $('#contact-is-writing').hide();
          self.isWritingFlag = false;
        }, this.writingTime);
      },
      stopContactWriting: function() {
        if (this.isWritingFlag) {
          self.isWritingFlag = false;
          $('#contact-is-writing').hide();
          clearTimeout(this.isWritingFlag);
        }
      },

      iAmWriting: function() {
        if (this.iAmWritingFlag) return;
        var self = this;

        this.socket.emit('messenger:private:i:am:writing', {
          toId: this.contact.id
        });

       this.iAmWritingFlag = setTimeout(function() {
          self.iAmWritingFlag = false;
        }, this.writingTime / 2);
      },

      setCount: function(count) {
        this.messageCount = count;
        $('#we-chat-message-count').text(this.messageCount);
      },

      incrementCount: function() {
        this.messageCount++;
        $('#we-chat-message-count').text(this.messageCount);
      },

      messageExists: function(id) {
        if ($('#we-chat-message-'+ id).length) return true;
        return false;
      },
      newMessage: function(message) {
        if (this.messageExists(message.id)) return;
        var self = this;
        if (!this.users[message.fromId]) {
          self.renderMessage(message, null);
          this.findUser(message.fromId, function (err, user) {
            self.users[message.fromId] = user;
            self.renderMessage(message, user);
          });
        } else {
          self.renderMessage(message, self.users[message.fromId]);
        }
      },

      renderMessage: function(message, creator) {
        var avatarTag = '';
        var isCurrentUserMessage = '';
        if (creator.id == this.user.id) isCurrentUserMessage = 'current-user';

        if (this.showAvatar) {
          avatarTag += '<img class="avatar" height="'+this.avatarWidth+'px" width="'+this.avatarWidth+'px" src="/avatar/' + message.fromId + '"> ';
        }

        position = this.getPosition(message);

        var item = '<li class="message '+ isCurrentUserMessage +'" id="we-chat-message-'+ message.id +'" data-message-id='+ message.id +' data-message-fromid'+message.fromId+'>';

        if (isCurrentUserMessage) {
          item += avatarTag;
          item += '<div class="talk-bubble tri-left right-top"><div class="talktext"><p>' +
            message.content +
          '</p></div></div>';

        } else {
          item += avatarTag;
          item += '<div class="talk-bubble tri-right left-top"><div class="talktext"><p>' +
            message.content +
          '</p></div></div>';
        }

        item += '</li>';
        this.elementList[position](item);

        $('#we-chat-message-' + message.id).emoticonize();
      },

      getPosition: function (message) {
        if (this.lastMessageId > message.id) {
          return 'prepend';
        } else {
          this.lastMessageId = message.id;
          return 'append';
        }
      },

      isScrolled: false,
      lockScroll: function lockScroll () {
        this.isScrolled = true;
      },

      scrollToBottom: function scrollToBottom() {
        var self = this;

        if (this.isScrolled) return;
        self.scrollTo( self.elementList[0].scrollHeight);
      },

      scrollTo: function scrollTo(height) {
        var self = this;
        // use one timeout to delay scroll and run after render messages inside the message box
        setTimeout(function() {
          self.elementList.scrollTop( height );
        }, 250);
      },

      sendMessage: function() {
        var self = this;
        var content = $.trim($('#newMessageContent').val());
        if (!content) return;

        $.post('/message', {
          content: content,
          toId: self.contact.id
        })
        .done(function(data) {
          self.newMessage(data.message[0]);
          self.messages.push(data.message[0]);
        })
        .fail(function() {
          alert( "error" );
        })
        .always(function() {
          $('#newMessageContent').val('');
          self.scrollToBottom();
        });

        return false;
      },
      /**
       * Get messages how authenticated user has did with user id
       */
      getMessagesWithUser: function getMessagesWithUser() {
        var self = this;

        self.startLoading();

        var self = this;
        return $.get('/message', {
          uid: self.contact.id,
          limit: self.limit,
          offset: self.offset,
          order: 'id DESC'
        })
        .done(function(data) {
          self.setCount(data.meta.count);
          for (var i = 0; i <= data.message.length-1; i++) {
            self.newMessage(data.message[i]);
            self.messages.push(data.message[i]);
          };
        })
        .fail(function() {
          alert( "error" );
        })
        .always(function() {
          self.stopLoading();
          $('#newMessageContent').val('');
        });
      },

      loadMoreMessages: function() {
        if (this.isLoadingMore) return;
        if (this.messageCount <= this.messages.length) return;

        var self = this;
        this.isLoadingMore = true;

        this.offset = this.offset + this.limit;

        var lastMessage = this.elementList.children(':first');
        //.position().top;

        this.getMessagesWithUser().always(function() {
          self.scrollTo( lastMessage.position().top );
          self.isLoadingMore = false;
        });
      },

      findUser: function(uid, cb) {
        if (this.loadingUsers[uid]) {
          this.loadingUsers[uid].done(function(data) {
            cb(null, data.user[0]);
          });
        } else {
          this.loadingUsers[uid] = $.get('/user/'+ uid)
          .done(function(data) {
            cb(null, data.user[0]);
          })
          .fail(function() {
            alert( "error" );
          });
        }
      }
    };

    window.weChat = weChat;

  </script>
  <script type="text/javascript">
    /**
     * Add Accept in all request
     *
     */
    $.ajaxPrefilter(function( options ) {
      if ( !options.beforeSend) {
        options.beforeSend = function (xhr) {
          xhr.setRequestHeader('Accept', 'application/json');

          // set auth token
          if ($.cookie('weoauth')) xhr.setRequestHeader('Authorization','Bearer ' + $.cookie('weoauth'));
        };
      }
    });

    window.moment.locale('{{locale}}');

    window.currentUser = {{{currentUserJsonRecord}}};
    window.contact = {{{jsonRecord}}};

    weChat.initialize();
  </script>
</body>
</html>